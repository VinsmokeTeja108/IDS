# Systemd service file for IDS Web UI
# This service runs the IDS application with the web UI interface
#
# Installation:
# 1. Copy this file to /etc/systemd/system/ids-webui.service
# 2. Update the paths and user/group as needed
# 3. Run: sudo systemctl daemon-reload
# 4. Run: sudo systemctl enable ids-webui.service
# 5. Run: sudo systemctl start ids-webui.service

[Unit]
Description=Intrusion Detection System Web UI
Documentation=https://github.com/yourusername/ids-web-ui
After=network.target network-online.target
Wants=network-online.target

[Service]
Type=simple

# User and Group
# IMPORTANT: Replace with appropriate user/group for your system
# The user should have permission to capture network packets (CAP_NET_RAW capability)
User=ids
Group=ids

# Working Directory
# IMPORTANT: Update this path to your IDS installation directory
WorkingDirectory=/opt/ids-web-ui

# Environment Variables
Environment="PYTHONUNBUFFERED=1"
Environment="FLASK_ENV=production"
Environment="IDS_CONFIG=/opt/ids-web-ui/config.yaml"

# Python Virtual Environment (if using venv)
# Uncomment and adjust path if using a virtual environment
# Environment="PATH=/opt/ids-web-ui/.venv/bin:$PATH"

# Main Service Command
# This runs the integrated IDS + Web UI application
ExecStart=/usr/bin/python3 /opt/ids-web-ui/run_ids_with_ui.py --host 127.0.0.1 --port 5000 --config /opt/ids-web-ui/config.yaml

# Alternative: Using virtual environment
# ExecStart=/opt/ids-web-ui/.venv/bin/python /opt/ids-web-ui/run_ids_with_ui.py --host 127.0.0.1 --port 5000 --config /opt/ids-web-ui/config.yaml

# Alternative: Using Gunicorn for production (recommended for high traffic)
# ExecStart=/opt/ids-web-ui/.venv/bin/gunicorn \
#     --worker-class geventwebsocket.gunicorn.workers.GeventWebSocketWorker \
#     --workers 1 \
#     --bind 127.0.0.1:5000 \
#     --timeout 120 \
#     --access-logfile /var/log/ids-webui/access.log \
#     --error-logfile /var/log/ids-webui/error.log \
#     web_ui.app:app

# Restart Policy
Restart=always
RestartSec=10

# Graceful Shutdown
# Allow time for the application to finish processing and cleanup
TimeoutStopSec=30
KillMode=mixed
KillSignal=SIGTERM

# Security Hardening
# These settings improve security by restricting what the service can do

# Capabilities
# Grant only the necessary capability for packet capture
AmbientCapabilities=CAP_NET_RAW CAP_NET_ADMIN
CapabilityBoundingSet=CAP_NET_RAW CAP_NET_ADMIN

# Filesystem Protection
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=/opt/ids-web-ui /var/log/ids-webui
PrivateTmp=true

# Network
# Allow network access (required for packet capture and web server)
PrivateNetwork=false

# Process Restrictions
NoNewPrivileges=true
ProtectKernelTunables=true
ProtectKernelModules=true
ProtectControlGroups=true
RestrictRealtime=true
RestrictNamespaces=true
LockPersonality=true

# System Call Filtering
SystemCallFilter=@system-service
SystemCallFilter=~@privileged @resources
SystemCallErrorNumber=EPERM

# Resource Limits
# Adjust these based on your system resources
LimitNOFILE=65536
LimitNPROC=512

# Memory and CPU limits (optional)
# MemoryLimit=2G
# CPUQuota=200%

# Logging
StandardOutput=journal
StandardError=journal
SyslogIdentifier=ids-webui

[Install]
WantedBy=multi-user.target

# Usage Instructions:
# -----------------
# Start service:    sudo systemctl start ids-webui
# Stop service:     sudo systemctl stop ids-webui
# Restart service:  sudo systemctl restart ids-webui
# Check status:     sudo systemctl status ids-webui
# View logs:        sudo journalctl -u ids-webui -f
# Enable on boot:   sudo systemctl enable ids-webui
# Disable on boot:  sudo systemctl disable ids-webui
